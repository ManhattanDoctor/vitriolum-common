import { FilterableConditionType } from "@ts-core/common";
import { FileMime } from "../file";
import { CoinId } from "../coin";
import { PaymentTransactionType } from "../payment";

export enum ErrorCode {
    REQUEST_INVALID = 'REQUEST_INVALID',
    INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS',
    LOCALE_PROJECT_NOT_FOUND = 'LOCALE_PROJECT_NOT_FOUND',

    LOGIN_ID_INVALID = 'LOGIN_ID_INVALID',
    LOGIN_TOKEN_INVALID = 'LOGIN_TOKEN_INVALID',
    LOGIN_SIGNATURE_INVALID = 'LOGIN_SIGNATURE_INVALID',

    USER_UNDEFINED = 'USER_UNDEFINED',
    USER_NOT_FOUND = 'USER_NOT_FOUND',
    USER_FORBIDDEN = 'USER_FORBIDDEN',
    USER_TOKEN_INVALID = 'USER_TOKEN_INVALID',
    USER_TOKEN_EXPIRED = 'USER_TOKEN_EXPIRED',

    AI_TASK_ABORTED = 'AI_TASK_ABORTED',
    AI_TASK_NOT_FOUND = 'AI_TASK_NOT_FOUND',
    AI_TASK_FORBIDDEN = 'AI_TASK_FORBIDDEN',

    AI_MODEL_NOT_FOUND = 'AI_MODEL_NOT_FOUND',
    AI_MODEL_NOT_SUPPORT_FILE = 'AI_MODEL_NOT_SUPPORT_FILE',

    FILE_NOT_FOUND = 'FILE_NOT_FOUND',
    FILE_FORBIDDEN = 'FILE_FORBIDDEN',
    FILE_NAME_INVALID = 'FILE_NAME_INVALID',
    FILE_MIME_INVALID = 'FILE_MIME_INVALID',
    FILE_SIZE_INVALID = 'FILE_SIZE_INVALID',
    FILE_AMOUNT_EXCEED = 'FILE_AMOUNT_EXCEED',
    FILE_VECTOR_INVALID_MIME = 'FILE_VECTOR_INVALID_MIME',
    FILE_VECTOR_ID_NOT_FOUND = 'FILE_VECTOR_ID_NOT_FOUND',
    FILE_VECTOR_ID_ALREADY_EXISTS = 'FILE_VECTOR_ID_ALREADY_EXISTS',

    VOICE_NOT_FOUND = 'VOICE_NOT_FOUND',
    VOICE_FORBIDDEN = 'VOICE_FORBIDDEN',
    VOICE_RESOURCE_INVALID = 'VOICE_RESOURCE_INVALID',
    VOICE_NAME_ALREADY_EXISTS = 'VOICE_NAME_ALREADY_EXISTS',

    CONVERSATION_NOT_FOUND = 'CONVERSATION_NOT_FOUND',
    CONVERSATION_FORBIDDEN = 'CONVERSATION_FORBIDDEN',

    OPEN_AI_FILE_NOT_FOUND = 'OPEN_AI_FILE_ID_NOT_FOUND',
    OPEN_AI_FILE_ALREADY_EXISTS = 'OPEN_AI_FILE_ALREADY_EXISTS',

    OPEN_AI_AGENT_NOT_FOUND = 'OPEN_AI_AGENT_NOT_FOUND',
    OPEN_AI_AGENT_FORBIDDEN = 'OPEN_AI_AGENT_FORBIDDEN',
    OPEN_AI_AGENT_IN_PROGRESS = 'OPEN_AI_AGENT_IN_PROGRESS',

    TOOL_CONVERT_INVALID = 'TOOL_CONVERT_INVALID'
}

export interface IInvalidDto<T = any> {
    name?: string;
    value: T | Array<T>;
    expected?: T | Array<T>;
    condition?: FilterableConditionType;
}

export interface IToolConvertInvalidDto {
    to: FileMime;
    from: FileMime;
}

export interface IInsufficientFundsDto {
    value: string;
    target: PaymentTransactionType;
    coinId: CoinId;
    expected: string;
}